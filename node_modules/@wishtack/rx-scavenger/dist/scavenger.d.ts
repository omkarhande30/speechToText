/**
 *
 * (c) 2013-2018 Wishtack
 *
 * $Id: $
 */
import 'core-js/es6/map';
import 'core-js/modules/es7.array.includes';
import { OnDestroy } from '@angular/core';
import { MonoTypeOperatorFunction } from 'rxjs';
export declare type PreSubscriptionOpaqueToken = any;
export declare class InvalidKeyError {
    private _message;
    constructor(key: string);
    toString(): string;
}
export declare class Scavenger {
    private _subscriptionMap;
    private _subscriptionList;
    private _preSubscriptionList;
    private _preSubscriptionMap;
    constructor(component?: OnDestroy);
    collect<T>(): MonoTypeOperatorFunction<T>;
    collectByKey<T>(key: string): MonoTypeOperatorFunction<T>;
    unsubscribe(): void;
    /**
     * `ngOnDestroy()` method is mandatory because Angular's Renderer2 doesn't call `ngOnDestroy` if added
     * dynamically.
     * Cf. https://github.com/wishtack/wishtack-steroids/issues/146.
     */
    private _tryRegisterNgOnDestroyHook(component);
    /**
     * `onPreSubscription` is needed in order to avoid synchronous fire hose observables which wouldn't be able
     * to unsubscribe themselves.
     * This is one way of having an opaque token that lets us know which subscription we are talking about.
     * Fire hose observables drain themselves before returning the closed subscription.
     *
     * @param onPreSubscription: called when the pipe is applied.
     * @param onSubscription: called when the subscription succeeds.
     * @private
     */
    private _trackSubscription<T>({isPreSubscriptionInProgress, onPreSubscription, onSubscription});
}
