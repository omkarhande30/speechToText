"use strict";
/**
 *
 * (c) 2013-2018 Wishtack
 *
 * $Id: $
 */
Object.defineProperty(exports, "__esModule", { value: true });
require("core-js/es6/map");
require("core-js/modules/es7.array.includes");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var InvalidKeyError = /** @class */ (function () {
    function InvalidKeyError(key) {
        this._message = "Invalid key: " + key;
    }
    InvalidKeyError.prototype.toString = function () {
        return this._message;
    };
    return InvalidKeyError;
}());
exports.InvalidKeyError = InvalidKeyError;
var Scavenger = /** @class */ (function () {
    function Scavenger(component) {
        if (component === void 0) { component = null; }
        this._subscriptionMap = new Map();
        this._subscriptionList = [];
        this._preSubscriptionList = [];
        this._preSubscriptionMap = new Map();
        this._tryRegisterNgOnDestroyHook(component);
    }
    Scavenger.prototype.collect = function () {
        var _this = this;
        return this._trackSubscription({
            /* Pre-subscription is still there which means that we still didn't have a subscription
             * and the pre-subscription has not been interrupted. */
            isPreSubscriptionInProgress: function (_a) {
                var preSubscription = _a.preSubscription;
                return _this._preSubscriptionList.includes(preSubscription);
            },
            onPreSubscription: function (_a) {
                var preSubscription = _a.preSubscription;
                return _this._preSubscriptionList.push(preSubscription);
            },
            onSubscription: function (_a) {
                var preSubscription = _a.preSubscription, subscription = _a.subscription;
                _this._subscriptionList.push(subscription);
                /* Performance: Remove `preSubscription` now that we have the subscription.
                 * This will improve `isPreSubscriptionInProgress`'s performance as it will be a smaller `Array`. */
                _this._preSubscriptionList = _this._preSubscriptionList
                    .filter(function (_preSubscription) { return _preSubscription !== preSubscription; });
            }
        });
    };
    Scavenger.prototype.collectByKey = function (key) {
        var _this = this;
        if (typeof key !== 'string' || key === '') {
            throw new InvalidKeyError(key);
        }
        return this._trackSubscription({
            isPreSubscriptionInProgress: function (_a) {
                var preSubscription = _a.preSubscription;
                return _this._preSubscriptionMap.get(key) === preSubscription;
            },
            onPreSubscription: function (_a) {
                var preSubscription = _a.preSubscription;
                return _this._preSubscriptionMap.set(key, preSubscription);
            },
            onSubscription: function (_a) {
                var preSubscription = _a.preSubscription, subscription = _a.subscription;
                var previousSubscription = _this._subscriptionMap.get(key);
                if (previousSubscription != null) {
                    previousSubscription.unsubscribe();
                }
                _this._subscriptionMap.set(key, subscription);
                /* Performance: Remove `preSubscription` now that we have the subscription.
                 * This will improve `isPreSubscriptionInProgress`'s performance as it will be a smaller `Map`. */
                _this._preSubscriptionMap.delete(key);
            }
        });
    };
    Scavenger.prototype.unsubscribe = function () {
        var subscriptionList = this._subscriptionList.concat(Array.from(this._subscriptionMap.values()));
        subscriptionList.forEach(function (subscription) { return subscription.unsubscribe(); });
        this._preSubscriptionList = [];
        this._subscriptionList = [];
        this._subscriptionMap.clear();
    };
    /**
     * `ngOnDestroy()` method is mandatory because Angular's Renderer2 doesn't call `ngOnDestroy` if added
     * dynamically.
     * Cf. https://github.com/wishtack/wishtack-steroids/issues/146.
     */
    Scavenger.prototype._tryRegisterNgOnDestroyHook = function (component) {
        var _this = this;
        if (component == null) {
            return;
        }
        var originalNgOnDestroy = component.ngOnDestroy.bind(component);
        component.ngOnDestroy = function () {
            _this.unsubscribe();
            if (originalNgOnDestroy != null) {
                originalNgOnDestroy();
            }
        };
    };
    /**
     * `onPreSubscription` is needed in order to avoid synchronous fire hose observables which wouldn't be able
     * to unsubscribe themselves.
     * This is one way of having an opaque token that lets us know which subscription we are talking about.
     * Fire hose observables drain themselves before returning the closed subscription.
     *
     * @param onPreSubscription: called when the pipe is applied.
     * @param onSubscription: called when the subscription succeeds.
     * @private
     */
    Scavenger.prototype._trackSubscription = function (_a) {
        var isPreSubscriptionInProgress = _a.isPreSubscriptionInProgress, onPreSubscription = _a.onPreSubscription, onSubscription = _a.onSubscription;
        return function (source$) { return new rxjs_1.Observable(function (subscriber) {
            var preSubscription = subscriber;
            onPreSubscription({ preSubscription: preSubscription });
            /* Let everything go through... */
            var subscription = source$
                .pipe(operators_1.takeWhile(function () {
                /* We have a subscription now so we don't care about pre-subscriptions any more. */
                if (subscription != null) {
                    return true;
                }
                return isPreSubscriptionInProgress({ preSubscription: preSubscription });
            }))
                .subscribe(subscriber);
            /* ...but grab subscription. */
            onSubscription({ preSubscription: preSubscription, subscription: subscription });
            return subscription;
        }); };
    };
    return Scavenger;
}());
exports.Scavenger = Scavenger;
//# sourceMappingURL=scavenger.js.map